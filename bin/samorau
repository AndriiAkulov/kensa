#!/usr/bin/env ruby

$: << File.dirname(__FILE__) + '/../lib'

require 'term/ansicolor'
require 'heroku/samorau'

fn="addon-manifest.json"
async=false
env="test"

ARGV.options do |o|
  o.on("-f file", "--file") {|filename| fn = filename }
  o.on("-h", "--help") { command = "help" }
  o.on("--async") { async = true }
  o.on("--production") { env = "production" }
  o.parse!
end

command = ARGV.shift

$stdout.sync = true

class Screen
  include Term::ANSIColor

  def test(msg)
    $stdout.puts
    $stdout.puts
    $stdout.print "Testing #{msg}"
  end

  def check(msg)
    $stdout.puts
    $stdout.print "  Check #{msg}"
  end

  def error(msg)
    $stdout.print "\n", magenta("    ! #{msg}")
  end

  def result(status)
    msg = status ? bold("[PASS]") : red(bold("[FAIL]"))
    $stdout.print " #{msg}"
  end

  def message(msg)
    $stdout.puts msg
  end

  def finish
    $stdout.puts
    $stdout.puts
    $stdout.puts "done."
  end

end

def resolve_manifest(fn)
  if File.exists?(fn)
    File.read(fn)
  else
    abort("fatal: #{fn} not found")
  end
end

def run(klass, fn, extras={})
  screen = Screen.new
  data = Yajl::Parser.parse(resolve_manifest(fn))
  check = klass.new(data.merge(extras), screen)
  check.call
  screen.finish
end

include Heroku::Samorau

case command
when "init"
  Manifest.init(fn)
  Screen.new.message "Initialized new addon manifest in #{fn}"
when "test"
  case check = ARGV.shift
  when "manifest"
    run ManifestCheck, fn
  when "provision"
    run ManifestCheck, fn
    run CreateCheck, fn, :async => async, :env => env
  when "deprovision"
    id = ARGV.shift || abort("! no id specified; see usage")
    run ManifestCheck, fn
    run DeleteCheck, fn, :id => id, :async => async, :env => env
  else
    abort "! Unknown test '#{check}'; see usage"
  end
when "run"
  abort "! missing command to run; see usage" if ARGV.empty?
  run ManifestCheck, fn
  run AllCheck, fn, :args => ARGV, :async => async, :env => env
else
  abort DATA.read
end

__END__
Usage: samorau [OPTIONS] command
       samorau init
       samorau test <type> [arg1 arg2 ...]
       samorau run <command> [arg1 arg1 ...]

OPTIONS

  -f, --filename path-to-file
    Sets the manifest file to operate on, default is addon-manifest.json.

  -h, --help
    Show this message

  --async
    Check provision call with async response.

COMMANDS

  init            Creates a skeleton manifest

  test <type>     Simulate call from Heroku (provision or deprovision)

  run <command>   Provisions a resource and runs command in returned ENV

TEST TYPES

  provision
    Simulate a provision call from Heroku.

  deprovision <id>
    Simulate a deprovision call from Heroku.

  manifest
    Confirm that the manifest is valid.  Automatically runs before all tests.

